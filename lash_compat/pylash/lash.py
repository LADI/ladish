# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _lash
else:
    import _lash

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


LASH_PROTOCOL_MAJOR = _lash.LASH_PROTOCOL_MAJOR
LASH_PROTOCOL_MINOR = _lash.LASH_PROTOCOL_MINOR
LASH_PROTOCOL_MAJOR_MASK = _lash.LASH_PROTOCOL_MAJOR_MASK
LASH_PROTOCOL_MINOR_MASK = _lash.LASH_PROTOCOL_MINOR_MASK
LASH_DEFAULT_PORT = _lash.LASH_DEFAULT_PORT
LASH_PORT = _lash.LASH_PORT
LASH_Config_Data_Set = _lash.LASH_Config_Data_Set
LASH_Config_File = _lash.LASH_Config_File
LASH_Server_Interface = _lash.LASH_Server_Interface
LASH_No_Autoresume = _lash.LASH_No_Autoresume
LASH_Terminal = _lash.LASH_Terminal
LASH_No_Start_Server = _lash.LASH_No_Start_Server
LASH_Client_Name = _lash.LASH_Client_Name
LASH_Jack_Client_Name = _lash.LASH_Jack_Client_Name
LASH_Alsa_Client_ID = _lash.LASH_Alsa_Client_ID
LASH_Save_File = _lash.LASH_Save_File
LASH_Restore_File = _lash.LASH_Restore_File
LASH_Save_Data_Set = _lash.LASH_Save_Data_Set
LASH_Restore_Data_Set = _lash.LASH_Restore_Data_Set
LASH_Save = _lash.LASH_Save
LASH_Quit = _lash.LASH_Quit
LASH_Server_Lost = _lash.LASH_Server_Lost
LASH_Project_Add = _lash.LASH_Project_Add
LASH_Project_Remove = _lash.LASH_Project_Remove
LASH_Project_Dir = _lash.LASH_Project_Dir
LASH_Project_Name = _lash.LASH_Project_Name
LASH_Client_Add = _lash.LASH_Client_Add
LASH_Client_Remove = _lash.LASH_Client_Remove
LASH_Percentage = _lash.LASH_Percentage

def lash_protocol_string(protocol):
    return _lash.lash_protocol_string(protocol)

def lash_extract_args(argc, argv):
    return _lash.lash_extract_args(argc, argv)

def lash_args_destroy(args):
    return _lash.lash_args_destroy(args)

def lash_init(args, client_class, client_flags, protocol):
    return _lash.lash_init(args, client_class, client_flags, protocol)

def lash_server_connected(client):
    return _lash.lash_server_connected(client)

def lash_get_server_name(client):
    return _lash.lash_get_server_name(client)

def lash_get_pending_event_count(client):
    return _lash.lash_get_pending_event_count(client)

def lash_get_event(client):
    return _lash.lash_get_event(client)

def lash_get_pending_config_count(client):
    return _lash.lash_get_pending_config_count(client)

def lash_get_config(client):
    return _lash.lash_get_config(client)

def lash_send_event(client, event):
    return _lash.lash_send_event(client, event)

def lash_send_config(client, config):
    return _lash.lash_send_config(client, config)

def lash_event_new():
    return _lash.lash_event_new()

def lash_event_new_with_type(type):
    return _lash.lash_event_new_with_type(type)

def lash_event_new_with_all(type, string):
    return _lash.lash_event_new_with_all(type, string)

def lash_event_destroy(event):
    return _lash.lash_event_destroy(event)

def lash_event_get_type(event):
    return _lash.lash_event_get_type(event)

def lash_event_get_string(event):
    return _lash.lash_event_get_string(event)

def lash_event_get_project(event):
    return _lash.lash_event_get_project(event)

def lash_event_get_client_id(event, id):
    return _lash.lash_event_get_client_id(event, id)

def lash_event_set_type(event, type):
    return _lash.lash_event_set_type(event, type)

def lash_event_set_string(event, string):
    return _lash.lash_event_set_string(event, string)

def lash_event_set_project(event, project):
    return _lash.lash_event_set_project(event, project)

def lash_event_set_client_id(event, id):
    return _lash.lash_event_set_client_id(event, id)

def lash_str_set_alsa_client_id(str, alsa_id):
    return _lash.lash_str_set_alsa_client_id(str, alsa_id)

def lash_event_set_alsa_client_id(event, alsa_id):
    return _lash.lash_event_set_alsa_client_id(event, alsa_id)

def lash_event_get_alsa_client_id(event):
    return _lash.lash_event_get_alsa_client_id(event)

def lash_str_get_alsa_client_id(str):
    return _lash.lash_str_get_alsa_client_id(str)

def lash_jack_client_name(client, name):
    return _lash.lash_jack_client_name(client, name)

def lash_alsa_client_id(client, id):
    return _lash.lash_alsa_client_id(client, id)

def lash_config_new():
    return _lash.lash_config_new()

def lash_config_dup(config):
    return _lash.lash_config_dup(config)

def lash_config_new_with_key(key):
    return _lash.lash_config_new_with_key(key)

def lash_config_destroy(config):
    return _lash.lash_config_destroy(config)

def lash_config_get_key(config):
    return _lash.lash_config_get_key(config)

def lash_config_get_value(config):
    return _lash.lash_config_get_value(config)

def lash_config_get_value_size(config):
    return _lash.lash_config_get_value_size(config)

def lash_config_set_key(config, key):
    return _lash.lash_config_set_key(config, key)

def lash_config_set_value(config, value, value_size):
    return _lash.lash_config_set_value(config, value, value_size)

def lash_config_get_value_int(config):
    return _lash.lash_config_get_value_int(config)

def lash_config_get_value_float(config):
    return _lash.lash_config_get_value_float(config)

def lash_config_get_value_double(config):
    return _lash.lash_config_get_value_double(config)

def lash_config_get_value_string(config):
    return _lash.lash_config_get_value_string(config)

def lash_config_set_value_int(config, value):
    return _lash.lash_config_set_value_int(config, value)

def lash_config_set_value_float(config, value):
    return _lash.lash_config_set_value_float(config, value)

def lash_config_set_value_double(config, value):
    return _lash.lash_config_set_value_double(config, value)

def lash_config_set_value_string(config, value):
    return _lash.lash_config_set_value_string(config, value)

def lash_get_fqn(dir, file):
    return _lash.lash_get_fqn(dir, file)

